Populate initial board with the right part types*

Change part execution model: let tumblerResult contain (be?) delegate to next fcn to execute (curryed with ball color when necessary).
Test board
  Insert parts, execute


Adding a dependency array to useEffect in UserInfo component causes the ramp part to not be rendered on page reload (but the board renders).*
Why?*

Add observability to dispenser and collector classes*

Change tilt of gear.png to match gearbits.*

Tighten the grid*

Tune the .png files. Use transparent background and use separate images for part pegs in the background.*

Add red dispenser and release button*

Let Board component take board as prop*

Introduce a Controller component*

Let Controller keep board state*

Interaction with DB shall go through Controller component.*

Add DB model for TumblerBoard + functions to serialize/deserialize TumblerBoard.*

Add board storage interface. Implementation: DB client

transparent background for crossover and interceptor parts*

change favicon (to tumble dry icon?)*

animation for lost ball error (explosion?)*

validate board data before writing to DB*

update board on load*

add ball sink. Clear on new execution.*

make the urls configurable in Controller.tsx and Client.tsx*

stop using the external url in default.conf*

clean up backend: remove unused path and remove startup test code

lift up signed-in state from UserInfo component*

Disable ball release while executing*

Add visible intercepted ball to Interceptor component. Remove on new execution start.*

change name of ITumblerPartObserver, exclude Part

Fix ball sink display. Display right-to-left. Make the sink visible even with 0 balls.*
